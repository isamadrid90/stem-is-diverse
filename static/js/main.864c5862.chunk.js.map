{"version":3,"sources":["components/Home.js","components/Person.js","components/People.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","Component","Person","GridListTile_default","key","this","props","picture","src","alt","altText","GridListTileBar_default","title","name","subtitle","tags","actionIcon","IconButton_default","People","peopleListRaw","peopleList","map","person","components_Person","id","country","history","dates","link","GridList_default","cellHeight","App","HashRouter","NavLink","exact","to","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAuBeA,gMAlBX,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,8cAMAF,EAAAC,EAAAC,cAAA,8RAGAF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kDAAR,mBAHA,6DAVWC,iEC2CJC,mLArCX,OAsBEN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAcO,IAAKC,KAAKC,MAAMC,SACxBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKH,KAAKC,MAAMC,QAASE,IAAKJ,KAAKC,MAAMI,UAC9Cd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACEe,MAAOP,KAAKC,MAAMO,KAClBC,SAAUlB,EAAAC,EAAAC,cAAA,YAAOO,KAAKC,MAAMS,MAC5BC,WACEpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,gBA9BKI,sCC0BNiB,mLAvBX,IAAIC,EAAgBC,EAAWC,IAAI,SAAAC,GACjC,OACI1B,EAAAC,EAAAC,cAACyB,EAAD,CAAQnB,IAAKkB,EAAOE,GACpBjB,QAASe,EAAOf,QAChBG,QAASY,EAAOZ,QAChBG,KAAMS,EAAOT,KACbY,QAASH,EAAOG,QAChBV,KAAMO,EAAOP,KACbW,QAASJ,EAAOI,QAChBC,MAAOL,EAAOK,MACdC,KAAMN,EAAOM,SAGnB,OACEhC,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACnBH,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAUiC,WAAY,KACnBX,WAnBYlB,wCCsBN8B,mLAjBX,OACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,SACJvC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAASE,GAAG,WAAZ,YAENvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAW3C,IACjCC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWpB,cAX3BjB,aCEEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.864c5862.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <section className=\"Home\">\n        <div>\n          As a woman in tech I know how difficult could be this world some if you are not one of the majority but I'm lucky because I know\n          that a lot of important people for tech were also part of a minority, sadly this is not something that everybody know so I created this \n          small project to see if having a place to show the rest of the world that tech and stem are diverse we could make them more inclusive\n          and interesting for people outside the majority.\n        </div>\n        <div>\n        This is just an MVP because I want to check if this kind of this is usefull, I don't work with React in my daily basis (in backend dev by the way)\n        so for sure my code could be improved, if you want to help me with the code or adding more diverse referents for stem here is  \n        <a href=\"https://github.com/isamadrid90/stem-is-diverse\">the github repo</a> create a PR and I would review it and merge ASAP\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n//import './Person.css';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass Person extends Component {\n  render() {\n    return (\n      // <div key={this.props.id}>\n      // <Grid container spacing={16} className=\"Person\">\n\n      //   <Grid item xs={4} sm={4} lg={5} xl={4} className=\"Picture\" >\n      //         <img src={this.props.picture} alt={this.props.altText}></img>\n      //   </Grid>\n      //   <Grid item xs={8} sm={8} lg={7} xl={8}>\n      //     <div className=\"information\">\n      //         <div className=\"Name\"><span>{this.props.name}</span></div>\n      //         <div className=\"Header\">\n      //             <span className=\"Country\">{this.props.country}</span>\n      //             <div className=\"Dates\">{this.props.dates}</div>\n      //             <div className=\"Tags\">{this.props.tags}</div>\n      //         </div>\n      //         <div className=\"History\">{this.props.history}</div>\n      //         <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"More\" href={this.props.link}>More details</a>\n      //     </div>\n      //     </Grid>\n      // </Grid>\n      // </div>\n\n      <GridListTile key={this.props.picture}>\n            <img src={this.props.picture} alt={this.props.altText} />\n            <GridListTileBar\n              title={this.props.name}\n              subtitle={<span>{this.props.tags}</span>}\n              actionIcon={\n                <IconButton >\n                </IconButton>\n              }\n            />\n        </GridListTile>\n    );\n  }\n}\n\nexport default Person;\n","import React, { Component } from 'react';\nimport Person from './Person';\n//import './People.css';\nimport peopleList from \"../data.json\";\nimport GridList from '@material-ui/core/GridList';\n\n\nclass People extends Component {\n  \n  render() {\n    let peopleListRaw = peopleList.map(person => {\n      return (\n          <Person key={person.id}\n          picture={person.picture}\n          altText={person.altText} \n          name={person.name} \n          country={person.country} \n          tags={person.tags} \n          history={person.history} \n          dates={person.dates}\n          link={person.link}/>\n      );\n    });\n    return (\n      <section className=\"People\">\n      <GridList cellHeight={180}>\n        {peopleListRaw}\n      </GridList>\n      </section>\n    );\n  }\n}\n\nexport default People;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport People from './components/People';\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <ul className=\"header\">\n            <li><NavLink exact to=\"/\">Home</NavLink></li>\n            <li><NavLink to=\"/people\">People</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/people\" component={People}/> \n          </div>\n        </div>\n      </HashRouter>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}